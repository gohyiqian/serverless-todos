service: ${self:custom.vars.appName}

frameworkVersion: "3"

plugins:
  - serverless-offline
  - serverless-s3-local

package:
  excludeDevDependencies: true
  patterns:
    - "!node_modules/**"
    - "!.env"
    - "!package.json"
    - "!package-lock.json"
    - "!Dockerfile"
    - '!"**.yml"'
    - "!**.md"
    - "!.next/**"
    - "!src/app/**"
    - "!out/**"
    - "!.github/**"
    - "!serverless-vars.yml"
    - "!.serverless/**"
    - "!next-env.d.ts"
    - "!next.config.js"
    - "!tailwind.config.js"
    - "!postcss.config.js"
    - "!public/**"
    - "!tsconfig.json"

custom:
  vars: ${file(./serverless-vars.yml):${self:provider.stage}}
  namePrefix: ${self:custom.vars.appName}-${self:provider.stage}-api

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  region: ${self:custom.vars.region, 'ap-southeast-2'}
  stackName: ${self:custom.namePrefix}-Serverless
  apiName: ${self:custom.namePrefix}
  environment:
    DYNAMODB_TABLE: ${self:custom.vars.appName}-${self:provider.stage}-ddb
    REGION: ${self:custom.vars.region, 'ap-southeast-2'}
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

layers:
  todo:
    path: src/layer
    name: ${self:custom.namePrefix}-LambdaLayer
    description: "Node.js dependencies"

functions:
  createTodo:
    name: ${self:custom.namePrefix}-createTodo
    handler: src/lambda/createTodo.handler
    # Ref name is generated by TitleCasing the layer name & appending LambdaLayer
    layers:
      - { Ref: TodoLambdaLayer }
    events:
      - httpApi:
          path: /todos
          method: post

resources:
  # This section is using CloudFormation template syntax
  Resources:
    TodosDDBTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
  Outputs:
    TodoLayerExport:
      Value:
        Ref: TodoLambdaLayer
      Export:
        Name: TodoLambdaLayer
